// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  NONE
  CLUELESS
  MOTIVATED
  HESITANT
}

model User {
  id                         String            @id @default(uuid())
  name                       String
  phone                      String?
  onboarded                  Boolean           @default(false)
  type                       UserType          @default(NONE)
  job                        Job?
  numberOfEmployees          Int?
  biggestChallengeQuestion   String?
  mainChallengeQuestion      String?
  decisionMakingQuestion     String?
  innovationTopicsQuestion   String?
  innovationBarrierQuestion  String?
  innovationSupportQuestion  String?
  technologyApproachQuestion String?
  innovationOpinionQuestion  String?
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  GuideCompletion            GuideCompletion[]
}

enum Job {
  MANUFACTURING
  MECHANICAL_ENGINEER
  CONSTRUCTION
  ENERGY
  AEROSPACE
  PHARMACEUTICAL
  LOGISTICS
  SOFTWARE
  FINTECH
}

model Guide {
  id               String            @id @default(uuid())
  title            String
  text             String            @db.Text
  imageUrl         String?
  shortTitle       String
  shortDescription String
  aiRecommendation String // move this in its own table if we actually implement it
  order            Int
  publishedAt      DateTime          @default(now())
  createdAt        DateTime          @default(now())
  GuideCompletion  GuideCompletion[]
}

enum GuideCompletionType {
  LOCKED
  AVAILABLE
  COMPLETED
}

model GuideCompletion {
  id      String              @id @default(uuid())
  guide   Guide               @relation(fields: [guideId], references: [id])
  user    User                @relation(fields: [userId], references: [id])
  state   GuideCompletionType
  guideId String
  userId  String
}

model News {
  id                         String   @id @default(uuid())
  title                      String
  text                       String   @db.Text
  personalizedRecommendation String?
  imageUrl                   String?
  publishedAt                DateTime @default(now())
  publisher                  String
  job                        Job // Links to a specific job category
  createdAt                  DateTime @default(now())
}
